new_object <- sqrt(962)
rm(list = ls())
x <- "Hello"
class(x)
as.factor(x)
class(x)
y <- as.factor(x)
x
x[2] <- "world"
x[2]
x[2,3] <- space
x[2,3] <- "space"
x[4] <- "space"
z = (x^2)+y
z <- as.matrix(x)
z[3,5] <- "hellppp"
z[2,5] <- "hellppp"
View(z)
View(z)
vector1 <- seq(20, 50)
?rnorm
rnorm(100, mean = 100, sd = 15)
random <- rnorm(100, mean = 100, sd = 15) # generate
length(random)
mean(random)
sd(random)
set.seed(2) # R random numbers aren't random. So if we all set the seed to 2, we all get the same set of numbers.
random <- rnorm(100, mean = 100, sd = 15) # generate
length(random)
mean(random)
sd(random)
hist(random)
rnorm(100, mean = 100, sd = 15)
?hist
hist(random,
col = "blue", border = "red")
hist(random,
densty = 2,
col = "blue",
border = "red")
hist(random,
densty = 5,
col = "blue",
border = "red")
hist(random,
densty = 5,
col = "blue",
border = "red")
hist(random,
densty = 1,
col = "blue",
border = "red")
hist(random,
density = 1,
col = "blue",
border = "red")
hist(random,
density = 3,
col = "blue",
border = "red")
hist(random,
density = 10,
col = "blue",
border = "red")
hist(random,
density = 10, angle = 90
col = "blue",
hist(random,
density = 10, angle = 90,
col = "blue",
border = "red")
hist(random,
density = 10, angle = 180,
col = "blue",
border = "red")
hist(random,
density = 10, angle = 30,
col = "blue",
border = "red")
hist(random,
density = 10, angle = 30,
col = "blue",
border = "red",
main = "noses smell",
xlab = "... do feet smell?",
ylab - "But then how...")
hist(random,
density = 10, angle = 30,
col = "blue",
border = "red",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 20,
col = "blue",
border = "red",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 10,
col = "blue",
border = "red",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 45,
col = "blue",
border = "red",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 45,
col = "green",
border = "red",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 45,
col = "green",
border = "purple",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 45,
col = "green",
border = "lavender",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 45,
col = "green",
border = "brown",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 45,
col = "green",
border = "yellow",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 45,
col = "green",
border = "green",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 45,
col = "blue",
border = "green",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
hist(random,
density = 10, angle = 45,
col = "blue",
border = "red",
main = "noses smell",
xlab = "... do feet smell?",
ylab = "But then how...")
y <- x
y <- 2*y
a <- rnorm(n = 50)
b <- a
b <- 2*b
ablm <- lm(b~a)
ablm
attributes(xylm)
attributes(ablm)
colnames(ablm)
rownames(ablm)
summary(ablm)
plot(a,b)
ablm$residuals
plot(ablm$residuals)
ggplot(mtcars, aes(wt, mpg, size = hp)) +
geom_text(aes(size = hp, label = cyl, color = am)) +
geom_smooth(aes(linetype = cyl), color = "grey", size = 0.5, se = FALSE, show.legend = FALSE) +
guides(size = "none") +
theme_classic() +
theme(legend.title = element_blank(), legend.justification = c(1, 1), legend.position = c(1, 1)) +
scale_color_manual(labels = c("manual", "automatic"), values = c("blue", "red")) +
labs(title = "Plot of Fuel Efficiency by Weight for 32 Cars", subtitle = "Number of cylinders; size = horsepower") +
xlab("weight (1000 lbs)")
search
search()
install.packages("tidyverse")
library("tidyverse")
search()
?persp
example(persp)
getwd()
?float_num
?list
?list()
?sample
replace
?replace
?reo
?rep
?cbind
?runif
?cat
?args
?args
args(sd)
?args
args(sd)
?sd
?args
args(sd)
?sd
?args
args(sd)
?sd
?args
args(sd)
?sd
args(sd)
?args
args(sd)
?sd
getS3method("t.test", "default")
getS3method("t.test", "default")
getS3method("getS3method", "default")
getS3method("t.test", "default")
getS3method("getS3method", "default")
getS3method("t.test", "default")
getS3method("getS3method", "default")
d#'##
?mean
set.seed(4)
mat <- matrix(runif(500, 0, 10), nrow = 50, ncol = 10)
num_na_values <- round(0.02 * 500)
na_indices <- sample(500, num_na_values)
mat[na_indices] <- NA
mat
clean_na <- function(matrix){
a
?)
clean_na <- function(matrix){
break
as
?
sde'uh[fa'rf
clean_na <- function(matrix){
for (i in 1:nrow(matrix)){
for (j in 1:ncol(matrix)){
if(is.na(matrix[i, j)){
clean_na <- function(matrix){
for (i in 1:nrow(matrix)){
for (j in 1:ncol(matrix)){
if(is.na(matrix[i, j])){
before_na <- matrix[i, j - 1]
after_na <- matrix[i, j + 1]
matrix[i, j] <- mean(c(before_na, after_na))
}
}
}
}
mat_clean <- clean_na(mat)
mat_vector <- is.vector(mat)
mat_vector <- as.vector(mat)
e
clean_vector <- function(vector){
for(i in vector){
if(is.na(i)){
before_na <- vector[i-1]
after_na <- vector[i+1]
vector[i] <- mean(c(before_na, after_na))
}
}
return(vector)
}
clean_vector(mat_vector)
mat_vector <- as.vector(mat)
mat_vector
clean_vector <- function(vector){
for(i in vector){
if(is.na(i)){
before_na <- vector[i-1]
after_na <- vector[i+1]
vector[i] <- mean(c(before_na, after_na))
}
}
return()
}
clean_vector(mat_vector)
clean_vector <- function(vector){
for(i in vector){
if(is.na(i)){
before_na <- vector[i-1]
after_na <- vector[i+1]
vector[i] <- mean(c(before_na, after_na))
next
}
}
return()
}
clean_vector <- function(vector){
for(i in vector){
if(is.na(i)){
before_na <- vector[i-1]
after_na <- vector[i+1]
vector[i] <- mean(c(before_na, after_na))
next
}
}
return(vector)
}
clean_vector(mat_vector)
clean_vector <- function(vector){
for(i in 1:length(vector)){
if(is.na(vector[i])){
before_na <- vector[i-1]
after_na <- vector[i+1]
vector[i] <- mean(c(before_na, after_na))
next
}
}
return(vector)
}
clean_vector(mat_vector)
mat_vector_cleaned <- clean_vector(mat_vector)
?as.matrix
as.matric(mat_vector_cleaned, nrow = 50, ncol = 10, byrow = TRUE)
as.matrix(mat_vector_cleaned, nrow = 50, ncol = 10, byrow = TRUE)
matrix(mat_vector_cleaned, nrow = 50, ncol = 10, byrow = TRUE)
matrix(mat_vector_cleaned, nrow = 50, ncol = 10, byrow = FALSE)
mat
?max
max(min(0.7, 1.0), -1.0)
max(min(1.2, 1.0), -1.0)
help(&&)
?strsplit
?gsub
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
pkgTest()
pkgTest(dplyr)
pkgTest(stringr)
pkgTest(ggplot)
pkgTest(ggplot2)
pkgTest(base)
pkgTest("base")
pkgTest("dplyr")
detachAllPackages()
upper_class_row <- 14 + 6 + 7
lower_class_row <- 7 + 7 + 1
grand_total_class <- upper_class_row + lower_class_row
rm(lower_class_row)
rm(upper_class_row)
upper_class_observed <- 14 + 6 + 7
lower_class_observed <- 7 + 7 + 1
not_stopped <- 14 + 7
bribe_requested <- 6 + 7
stopped_or_given_warning <- 7 + 1
rm(stopped_or_given_warning)
stopped_or_warning <- 7 + 1
upper_class_expected_not_stopped <- (upper_class_observed/grand_total_class)*not_stopped
lower_class_expected_not_stopped <- (lower_class_observed/grand_total_class)*not_stopped
upper_class_expected_bribe_requested <- (upper_class_observed/grand_total_class)*bribe_requested
lower_class_expected_bribe_requested <- (lower_class_observed/grand_total_class)*bribe_requested
upper_class_expected_stopped_or_warning <- (upper_class_observed/grand_total_class)*stopped_or_warning
lower_class_expected_stopped_or_warning <- (lower_class_observed/grand_total_class)*stopped_or_warning
fe
fo <- c(14, 7, 6, 7, 7, 1)
fe <- c(upper_class_expected_not_stopped, lower_class_expected_not_stopped, upper_class_expected_bribe_requested, lower_class_expected_bribe_requested, upper_class_expected_stopped_or_warning, lower_class_expected_stopped_or_warning)
police_response <- matrix(data = c(fo, fe))
View(police_response)
View(police_response)
?matrix
police_response <- matrix(data = c(fo, fe), ncol = 3)
View(police_response)
View(police_response)
police_response <- matrix(data = c(fo, fe), nrow = 2)
sum <- vector()
sum <- as.numeric(vector())
for(i in fo){
for j in fe{
for(i in fo){
for(j in fe){
sum <<- vector(sum + (sqrt(i-j)/j))
}
}
police_response <- table(fo, fe)
police_response <- matrix(data = c(fo, fe), nrow = 2)
for(i in fo){
for(j in fe){
sum <<- vector(sum + (sqrt(i-j)/j))
}
}
View(police_response)
View(police_response)
chi_squared_statistic <- sum(
sqrt(14 - upper_class_expected_not_stopped)/upper_class_expected_not_stopped,
sqrt(7 - lower_class_expected_not_stopped)/lower_class_expected_not_stopped,
sqrt(6 - upper_class_expected_bribe_requested)/upper_class_expected_bribe_requested,
sqrt(7 - lower_class_expected_bribe_requested)/lower_class_expected_bribe_requested,
sqrt(7 - upper_class_expected_stopped_or_warning)/upper_class_expected_stopped_or_warning,
sqrt(1 - lower_class_expected_stopped_or_warning)/lower_class_expected_stopped_or_warning
)
?NaN
chi_squared_statistic <- sum(
sqrt(14 - upper_class_expected_not_stopped)/upper_class_expected_not_stopped),
sqrt(14 - upper_class_expected_not_stopped)
sqrt(14 - upper_class_expected_not_stopped)/upper_class_expected_not_stopped
sqrt(7 - lower_class_expected_not_stopped)/lower_class_expected_not_stopped
7 - lower_class_expected_not_stopped
lower_class_expected_not_stopped
sqrt(7 - lower_class_expected_not_stopped)/lower_class_expected_not_stopped
sqrt(7 - lower_class_expected_not_stopped)
7 - lower_class_expected_not_stopped
-0.5*-0.5
sqrt(7 - lower_class_expected_not_stopped)
7 - lower_class_expected_not_stopped
sqrt(-0.5)
?sqrt
sqrt(7 - lower_class_expected_not_stopped)
(7 - lower_class_expected_not_stopped)^2
sqrt(6 - upper_class_expected_bribe_requested)
sqrt(7 - lower_class_expected_bribe_requested)
sqrt(7 - upper_class_expected_stopped_or_warning)
sqrt(1 - lower_class_expected_stopped_or_warning)
chi_squared_statistic <- sum(
sqrt(14 - upper_class_expected_not_stopped)/upper_class_expected_not_stopped,
(7 - lower_class_expected_not_stopped)^2/lower_class_expected_not_stopped,
(6 - upper_class_expected_bribe_requested)^2/upper_class_expected_bribe_requested,
sqrt(7 - lower_class_expected_bribe_requested)/lower_class_expected_bribe_requested,
sqrt(7 - upper_class_expected_stopped_or_warning)/upper_class_expected_stopped_or_warning,
(1 - lower_class_expected_stopped_or_warning)^2/lower_class_expected_stopped_or_warning
)
chi_squared_statistic
# Get working directory
getwd()
# Set working directory
setwd("C:\\Users\\criom\\Documents\\GitHub\\StatsI_Fall2023")
getwd()
# Install and load packages
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
?wb
# Reshape data from long to wide (put rows in columns)
wb_re <- reshape(wb[, c("country","iso3c","date","indicatorID","value")], # df
timevar = "indicatorID", # New columns
idvar = c("country","date","iso3c"), # Identifiers for rows
direction = "wide")
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
# Merge
df <- merge(wb_re, # Left df
qog[, c("ccodealp","year","bmr_dem")], # Right df
by.x=c("date","iso3c"), # Merge variables in left
by.y=c("year","ccodealp"), # Merge variables in right
all.x=TRUE, # Merge operation, only keep left
sort=FALSE) # Do not sort observations
# Rename columns
names(df)
names(df)[4] <- "gdp_per_cap"
names(df)[5] <- "pop_size"
names(df)[6] <- "sec_enrol"
names(df)[7] <- "mort"
names(df)[8] <- "democracy"
# Rename columns
names(df)
View(df)
# Save df
write.csv(df, "datasets/df_income_mortality.csv")
View(wb)
