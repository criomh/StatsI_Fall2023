getwd()
# Load data
df <- read.csv("datasets/fictional_data.csv")
getwd()
setwd("C:/criom/Documents/GitHub/StatsI_Fall2023")
setwd("C:\Users\criom\Documents\GitHub\StatsI_Fall2023")
setwd("C:\\Users\\criom\\Documents\\GitHub\\StatsI_Fall2023")
getwd()
# Load data
df <- read.csv("datasets/fictional_data.csv")
# First step, look at data
View(df)
View(df)
head(df)
view(df)
View(df)
str(df)
mean(df$income) # Central tendency, mean
var(df$income) # Variability, variance
?var
sd(df$income)
sd(df$income)/sqrt(length(df$income)) # Variability, standard **error**
length(df$income) # Number of observations
length(df$income)
sprt(19)
sqrt(19)
# Get summary statistics for entire dataset
summary(df)
# Some quick visualizations, to look at distribution
hist(df$income,
#breaks = 20,
main="Monthly net income",
xlab="Euro")
plot(density(df$incom),
main="Monthly net income",
xlab="Euro")
density)df$income
density(df$income)
density(df$income)
plot(df$income,
main="Monthly net income",
xlab="Euro"
qw
?plot
plot(df$income, y = NULL,
main="Monthly net income",
xlab="Euro"
s
hist(df$income,
#breaks = 20,
main="Monthly net income",
xlab="Euro")
plot(density(df$income),
main="Monthly net income",
xlab="Euro")
hist(df$income,
sad
f
plot(density(df$income),
main="Monthly net income",
xlab="Euro")
?sd
mean(df$income)+(1.96*sd(df$income)/sqrt(length(df$income)))
mean(df$income)-(1.96*sd(df$income)/sqrt(length(df$income)))
# The **approximate** solution
# Lower bound, 95 confidence level
upper_95 = mean(df$income)+(1.96*sd(df$income)/sqrt(length(df$income)))
# Upper bound, 95 confidence level
lower_95 = mean(df$income)-(1.96*sd(df$income)/sqrt(length(df$income)))
lower_95
mean(df$income)
upper_95
lower_95_n <- qnorm(0.025,
mean = mean(df$incom),
sd = (sd(df$income)/sqrt(length(df$income))))
# Upper bound, 95 confidence level
upper_95_n <- qnorm(0.975,
mean = mean(df$income),
sd = (sd(df$incom)/sqrt(length(df$income))))
lower_95_n
mean(df$income)
upper_95_n
# Step by step
?qnorm
qnorm(0.025) # value for first 2.5%
qnorm(0.025, mean=2, sd=0.4) # Change mean and standard error
# The **precise** solution, using t distribution
t_score <- qt(0.995, df=length(df$income)-1)
?qt
qt(o.995, 5)
qt(0.995, 5)
qt(0.995, 10)
qt(0.995, 20)
qt(0.995, 30)
qt(0.995, 50)
qt(0.995, 100)
qt(0.995, 200)
qt(0.995, 300)
?qt
qt(0.005, df=length(df$income)-1) # critical value for first 0.5%
qt(0.995, df=length(df$income)-1) # last 0.5%
qt(0.005, df=length(df$income)-1, lower.tail=FALSE) # last 0.5%
# Update Histogram
hist(df$income)
abline(v=mean(df$income),col="black")
abline(v=mean(df$income),col="black")
abline(v=lower_95,col="black",lty="dashed")
abline(v=upper_95,col="black",lty="dashed")
hist(df$income)
abline(v=mean(df$income),col="blue")
abline(v=lower_95,col="red",lty="dashed")
abline(v=upper_95,col="green",lty="dashed")
plot(df$income,df$edu)
plot(df$income,df$edu,
col=df$cap+1)
png(file="tutorials/02/scatter_plot.png")
plot(df$income,
df$edu,
col=df$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
legend(1000, 8, # x and y position of legend
legend=c("Non capital", "Capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
dev.off()
png(file="tutorials/02/scatter_plot.png")
plot(df$income,
df$edu,
col=df$cap+1,
xlab="Monthly net income (in Euro)",
ylab="University level education (in years)",
main="The Relationship between education and income")
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Non capital", "Capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
dev.off()
# Boxplot
boxplot(df$income ~ df$cap,
main="Boxplot of Income by place of residence",
ylab="Euro",
xlab="Place of residence",
names=c("Non capital","Capital"))
?~
a
?boxplot
t.test(df$income, mu = 3034)
t.test(df$income, mu = 3034, alternative = "less")
# We also found a much easier way to calculate the confidence intervals (!)
t.test(df$income, conf.level = 0.99, alternative = "two.sided")
# Step by step
df$cap
df[df$cap==0, ]$income # Access variable
# t-test
t.test(df$income ~ df$cap, alternative = "two.sided")
# t-test
t.test(df$income ~ df$cap, alternative = "less")
# t-test
t.test(df$income ~ df$cap, alternative = "two.sided")
