Prestige$professional # Note NAs are still present
# Remove observations with NAs
Prestige_complete <- Prestige[complete.cases(Prestige), ]
### b) linear model, y = prestige, x = income, professional, and interaction betw income and professional
# Create linear regression model
model_1 <- lm(prestige ~ income + professional + income:professional, Prestige_complete)
summary(model_1)
plot(model_1)
# Applied Statistical Analysis I
# Tutorial 12: Multiple regression, Regression diagnostics
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("car"),  pkgTest)
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Agenda
# (1) Influential cases/outliers
# (2) OLS assumptions
#     - Normality
#     - Constant variance
#     - Linearity
#     - Multicollinearity
# Research question:
# What is the relationship between education and Euroscepticism?
# Load data
df <- read.csv("../../datasets/ess_euroscepticism.csv", row.names="X")
View(df)
# Convert categorical variables into factor
df$edu_cat <- factor(df$edu_cat)
df$gndr <- ifelse(df$gndr == 2, 1, 0)
df$gndr <- factor(df$gndr, labels = c("Male", "Female"))
df$brncntr <- ifelse(df$brncntr == 2, 1, 0)
df$brncntr <- factor(df$brncntr, labels = c("Born in country", "Not born in country"))
# Complete case analysis
df_na <- df[complete.cases(df), ]
# Reset index
rownames(df_na) <- 1:nrow(df_na)
# Final model
model_final <- lm(euftf_re~eduyrs +
hinctnta +
trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_final)
# Get Cook's Distance for all observations
cooks_d <- cooks.distance(model_final)
cooks_d
# Plot
par(mar=c(5,4,3,3)) # Reset figure margins
plot(model_final, which=4)
# Get top 10 highest Cook's Distance values
head(sort(cooks_d, decreasing=TRUE),10)
# Calculate threshold
thres <- 4/(nobs(model_final)-(length(coef(model_final))-1)-1)
# Get observations above threshold
which(sort(cooks_d, decreasing=TRUE)>thres)
# Subsetting data frames, df[row,column]
df_na[159,c("euftf_re","eduyrs","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[159] # Predicted outcome
df_na[458,c("euftf_re","eduyrs","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[458] # Predicted outcome
df_na[263,c("euftf_re","eduyrs","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[263] # Predicted outcome
dfbeta <- dfbeta(model_final)
View(dfbeta)
# Print results for some observations
dfbeta[1, c("eduyrs")]
dfbeta[2, c("eduyrs")]
sprintf("%.10f", dfbeta[1, c("eduyrs")])
dfbeta[,c("eduyrs")][which.max(abs(dfbeta[,c("eduyrs")]))]
dfbeta[,c("hinctnta")][which.max(abs(dfbeta[,c("hinctnta")]))]
dfbeta[,c("trstplt")][which.max(abs(dfbeta[,c("trstplt")]))]
dfbeta[,c("imwbcnt")][which.max(abs(dfbeta[,c("imwbcnt")]))]
# Subsetting data frames, df[row,column]
df_na[404,c("euftf_re","eduyrs","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[404] # Predicted outcome
df_na[344,c("euftf_re","eduyrs","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[344] # Predicted outcome
# Plot
plot(model_final, which=5)
df_na[352,c("euftf_re","eduyrs","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[352] # Predicted outcome
# Histogram of error
hist(model_final$residuals)
# QQ (Quantile-quantile) plot
plot(model_final, which=2)
# What to do if labels of observations are overlapping?
which(model_final$residuals>6.35 & model_final$fitted.values<4.5)
# Residual versus fitted plot
plot(model_final, which=1)
# Scatter plots
plot(df_na$eduyrs,jitter(df_na$euftf_re,2))
plot(df_na$hinctnta,jitter(df_na$euftf_re,2))
plot(df_na$trstplt,jitter(df_na$euftf_re,2))
plot(df_na$imwbcnt,jitter(df_na$euftf_re,2))
plot(df_na$agea,jitter(df_na$euftf_re,2))
# Residual plot
residualPlots(model_final)
# Add a quadratic term for trust in politics
df_na$trstplt_trstplt <- df_na$trstplt^2
# Fit model
model_quad <- lm(euftf_re~eduyrs +
hinctnta +
trstplt +
trstplt_trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_quad)
# Compare residual plot for quadratic model
residualPlots(model_quad)
# We might also want to log-transform education years.
# This variable is right/positively skewed.
hist(df_na$eduyrs)
# Log-transform education years
# +1 because log(0) = -Inf
hist(log(df_na$eduyrs+1))
min(df_na$eduyrs)
log(0)
# Fit model
model_log <- lm(euftf_re~log(eduyrs+1) +
hinctnta +
trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_log)
# Compare residual plot for log model
residualPlots(model_log)
# Correlation matrix
cor(df_na[, c("eduyrs","hinctnta","trstplt","imwbcnt","agea")])
# Variance Inflation Factor
vif(model_final)
# Create a variable with high correlation
cor(df_na$trstplt,df_na$imwbcnt)
df_na$trust_att <- df_na$trstplt + df_na$imwbcnt
cor(df_na$trust_att,df_na$trstplt)
cor(df_na$trust_att,df_na$imwbcnt)
# Refit model with highly correlated variables
model_collin <- lm(euftf_re~eduyrs +
hinctnta +
trstplt +
imwbcnt +
trust_att, data=df_na)
summary(model_collin)
# Create a variable with high correlation
cor(df_na$trstplt,df_na$imwbcnt)
df_na$trust_att <- df_na$trstplt + df_na$imwbcnt
cor(df_na$trust_att,df_na$trstplt)
cor(df_na$trust_att,df_na$imwbcnt)
# Refit model with highly correlated variables
model_collin <- lm(euftf_re~eduyrs +
hinctnta +
trstplt +
imwbcnt +
trust_att, data=df_na)
summary(model_collin)
##### PREAMBLE ----
### Clear global .environment
# Remove all objects in environment
rm(list=ls())
# Detach all loaded libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
### Load packages
# Create function for checking for required packages
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load packages: {car}
lapply(c("car"), pkgTest)
### Set working directory
# Check working directory
getwd()
# Set WD to folder of current R file.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# COnfirm WD now correct
getwd()
##### PROBLEM SET QUESTIONS ----
### Question 1 ----
# Load [Prestige] dataset
data("Prestige")
# Check [Prestige] dataset
help("Prestige") # Calls R documentation
head(Prestige, 5) # Shows top 5 observations and variable names
dim(Prestige) # Gives dimensions of data set
str(Prestige) # Gives details about data set type and its dimensions, as well as the names and types for each variable
summary(Prestige) # Gives summary statistics for each variable
### a) New variable 'professional'
# Check levels of variable "type".
levels(Prestige$type) # "prof" = professional; "bc" = blue-collar; "wc" = white-collar
# Create new dummy variable "professional" where prof = 1 and remaining (bc and wc) = 0.
Prestige$professional <- ifelse(Prestige$type == "prof", 1, 0)
# Coerce as factor to ensure model doesn't interpret as a continous numerical variable
Prestige$professional <- as.factor(Prestige$professional)
# Check new variable
Prestige$professional # Note NAs are still present
# Remove observations with NAs
Prestige_complete <- Prestige[complete.cases(Prestige), ]
### b) linear model, y = prestige, x = income, professional, and interaction betw income and professional
# Create linear regression model
model_1 <- lm(prestige ~ income + professional + income:professional, Prestige_complete)
summary(model_1)
t_stat_a <- (0.042 - 0)/0.016
t_stat_a
t_score_a <- (0.042 - 0)/0.016
t_score_a
t_statistic_a <- (0.042 - 0)/0.016
t_statistic_a
t_stat_a <- coefficient_a - 0 / (se_a / n_a)
coefficient_a <- 0.042
se_a <- 0.016
n_a <- 30
t_stat_a <- coefficient_a - 0 / (se_a / n_a)
t_stat_a
t_stat_a <- coefficient_a / (se_a / n_a)
t_stat_a
t_stat_a <- (coefficient - null_hyp) / (se_a / n_a)
t_stat_a <- (coefficient_a - null_hyp) / (se_a / n_a)
null_hyp <- 0
t_stat_a <- (coefficient_a - null_hyp) / (se_a / n_a)
t_stat_a
t_stat_a <- (coefficient_a - null_hyp) / (se_a / sqrt(n_a))
t_stat_a
coefficient_a <- 0.042
se_a <- 0.016
n_a <- 30
null_hyp <- 0
t_stat_a <- (coefficient_a - null_hyp) / (se_a / sqrt(n_a))
t_stat_a
critical_value <- qt((1 - 0.05)/2, df = n_a - 1)
p_value_a <- pt(abs(t_stat_a), df = n_a - 1)
alpha <- 0.05
null_hyp_a <- ifelse(p_value < alpha,
print("P-value is less than the critical value of 0.05, giving evidence to reject the null hypothesis."),
print("P-value is not less than the critical value of 0.05, failing to give evidence to reject the null hypothesis."))
null_hyp_a <- ifelse(p_value_a < alpha,
print("P-value is less than the critical value of 0.05, giving evidence to reject the null hypothesis."),
print("P-value is not less than the critical value of 0.05, failing to give evidence to reject the null hypothesis."))
null_hyp_a
null_hyp_a <- ifelse(p_value_a < alpha,
print("P-value is less than the critical value of 0.05, giving evidence to reject the null hypothesis."),
print("P-value is not less than the critical value of 0.05, failing to give evidence to reject the null hypothesis."))
null_hyp_a
coefficient_b <- 0.042
se_b <- 0.013
n_b <- 76
# null_hyp <- 0 : same as in a)
t_stat_b <- (coefficient_b - null_hyp) / (se_b / sqrt(n_b))
t_stat_b
p_value_b <- pt(abs(t_stat_b), df = n_b - 1)
# alpha <- 0.05 : same as in a)
null_hyp_b <- ifelse(p_value_a < alpha,
print("P-value is less than the critical value of 0.05, giving evidence to reject the null hypothesis."),
print("P-value is not less than the critical value of 0.05, failing to give evidence to reject the null hypothesis."))
null_hyp_b
sqrt(n_b)
(se_b / sqrt(n_b)
)
t_stat_a
coefficient_a <- 0.042
se_a <- 0.016
n_a <- 30
null_hyp <- 0
t_stat_a <- (coefficient_a - null_hyp) / (se_a / sqrt(n_a))
t_stat_a
p_value_a <- pt(abs(t_stat_a), df = n_a - 1)
alpha <- 0.05
coefficient_b <- 0.042
se_b <- 0.013
n_b <- 76
# null_hyp <- 0 : same as in a)
t_stat_b <- (coefficient_b - null_hyp) / (se_b / sqrt(n_b))
t_stat_b
p_value_b <- pt(abs(t_stat_b), df = n_b - 1)
t_stat_a <- (coefficient_a - null_hyp) / (se_a))
t_stat_a <- (coefficient_a - null_hyp) / (se_a)
t_stat_a
p_value_a <- pt(abs(t_stat_a), df = n_a - 1)
coefficient_b <- 0.042
se_b <- 0.013
n_b <- 76
# null_hyp <- 0 : same as in a)
t_stat_b <- (coefficient_b - null_hyp) / (se_b)
t_stat_b
p_value_b <- pt(abs(t_stat_b), df = n_b - 1)
p_value_b <- pt(1 - abs(t_stat_b), df = n_b - 1)
p_value_a <- pt(1 - abs(t_stat_a), df = n_a - 1)
t_stat_a <- coefficient_a - null_hyp / se_a
p_value_a <- pt(abs(t_stat_a), df = n_a - 1)
critical_value <- qt(alpha, df = n_a -1, lower.tail = FALSE)
critical_value <- pt(alpha, df = n_a -1, lower.tail = FALSE)
critical_value <- qt(alpha, df = n_a -1, lower.tail = FALSE)
# Calculate critical value and check
alpha <- 0.05
critical_value <- qt(alpha, df = n_a -1, lower.tail = FALSE)
t_stat_a <- (coefficient_a - null_hyp) / se_a
coefficient_a - null_hyp
critical_value <- (alpha, df = n_a, lower.tail = FALSE)
# Calculate critical value and check
alpha <- 0.05
critical_value <- (alpha, df = n_a, lower.tail = FALSE)
critical_value <- qt(alpha, df = n_a, lower.tail = FALSE)
?qt
critical_value_a <- qt(alpha, df = n_a, lower.tail = FALSE)
critical_a <- ifelse(abs(t_stat_a) > critical_value_a, "Greater than critical value", "Less than critical value")
critical_a
critical_value_a <- qt(alpha, df = n_a - 2 - 1, lower.tail = FALSE)
critical_a <- ifelse(abs(t_stat_a) > critical_value_a, "Greater than critical value", "Less than critical value")
critical_a
# Calculate p-value and check
p_value_a <- pt(abs(t_stat_a), df = n_a - 2 - 1)
null_hyp_a <- ifelse(p_value_a < alpha, "Less than 0.05", "Greater than 0.05")
null_hyp_a
# Calculate p-value and check
p_value_a <- 2 * pt(abs(t_score_a), df = n_a - 2 - 1)
coefficient_a <- 0.042
se_a <- 0.016
n_a <- 30
null_hyp <- 0
t_score_a <- coefficient_a - null_hyp / se_a
t_score_a
# Calculate critical value and check
alpha <- 0.05
df_residual_a <- n_a - 2 - 1
critical_value_a <- qt(alpha, df = df_residual_a, lower.tail = FALSE)
critical_a <- ifelse(abs(t_score_a) > critical_value_a, "Greater than critical value", "Less than critical value")
critical_a
# Calculate p-value and check
p_value_a <- 2 * pt(abs(t_score_a), df = n_a - 2 - 1)
null_hyp_a <- ifelse(p_value_a < alpha, "Less than 0.05", "Greater than 0.05")
null_hyp_a
# Calculate p-value and check
p_value_a <- 2 * pt(abs(t_score_a), df = df_residual_a)
abs(t_score_a)
##### PREAMBLE ----
### Clear global .environment
# Remove all objects in environment
rm(list=ls())
# Detach all loaded libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
### Load packages
# Create function for checking for required packages
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load packages: {car}
lapply(c("car"), pkgTest)
# Check working directory
getwd()
# Load [Prestige] dataset
data("Prestige")
# Calculate t-statistic
coefficient_a <- 0.042
se_a <- 0.016
n_a <- 30
null_hyp <- 0
t_score_a <- coefficient_a - null_hyp / se_a
t_score_a <- (coefficient_a - null_hyp) / se_a
# Calculate critical value and check
alpha <- 0.05
df_residual_a <- n_a - 2 - 1
critical_value_a <- qt(alpha, df = df_residual_a, lower.tail = FALSE)
critical_a <- ifelse(abs(t_score_a) > critical_value_a, "Greater than critical value", "Less than critical value")
critical_a
# Calculate p-value and check
p_value_a <- 2 * pt(abs(t_score_a), df = df_residual_a)
null_hyp_a <- ifelse(p_value_a < alpha, "Less than 0.05", "Greater than 0.05")
null_hyp_a
abs(t_score_a)
critical_value_a
# Calculate p-value and check
p_value_a <- 2 * pt(abs(t_score_a), df = df_residual_a, lower.tail = FALSE)
null_hyp_a <- ifelse(p_value_a < alpha, "Less than 0.05", "Greater than 0.05")
null_hyp_a
coefficient_b <- 0.042
se_b <- 0.076
n_b <- 76
t_score_b <- (coefficient_b - null_hyp) / se_b
t_score_b
# Calculate critical value and check
df_residual_b <- n_a - 2 - 1
critical_value_b <- qt(alpha, df = df_residual_b, lower.tail = FALSE)
critical_b <- ifelse(abs(t_score_b) > critical_value_b, "Greater than critical value", "Less than critical value")
critical_b
# Calculate p-value and check
p_value_b <- 2 * pt(abs(t_score_b), df = df_residual_b, lower.tail = FALSE)
null_hyp_b <- ifelse(p_value_b < alpha, "Less than 0.05", "Greater than 0.05")
null_hyp_b
df_residual_b <- n_b - 2 - 1
critical_value_b <- qt(alpha, df = df_residual_b, lower.tail = FALSE)
critical_b <- ifelse(abs(t_score_b) > critical_value_b, "Greater than critical value", "Less than critical value")
critical_b
# Calculate p-value and check
p_value_b <- 2 * pt(abs(t_score_b), df = df_residual_b, lower.tail = FALSE)
null_hyp_b <- ifelse(p_value_b < alpha, "Less than 0.05", "Greater than 0.05")
null_hyp_b
se_b <- 0.013
n_b <- 76
t_score_b <- (coefficient_b - null_hyp) / se_b
t_score_b
# Calculate critical value and check
df_residual_b <- n_b - 2 - 1
critical_value_b <- qt(alpha, df = df_residual_b, lower.tail = FALSE)
critical_b <- ifelse(abs(t_score_b) > critical_value_b, "Greater than critical value", "Less than critical value")
critical_b
# Calculate p-value and check
p_value_b <- 2 * pt(abs(t_score_b), df = df_residual_b, lower.tail = FALSE)
null_hyp_b <- ifelse(p_value_b < alpha, "Less than 0.05", "Greater than 0.05")
null_hyp_b
coefficient_b <- 0.042
se_b <- 0.013
n_b <- 76
t_score_b <- (coefficient_b - null_hyp) / se_b
t_score_b
# Calculate critical value and check
df_residual_b <- n_b - 2 - 1
critical_value_b <- qt(alpha, df = df_residual_b, lower.tail = FALSE)
critical_b <- ifelse(abs(t_score_b) > critical_value_b, "Greater than critical value", "Less than critical value")
critical_b
# Calculate p-value and check
p_value_b <- 2 * pt(abs(t_score_b), df = df_residual_b, lower.tail = FALSE)
null_hyp_b <- ifelse(p_value_b < alpha, "Less than 0.05", "Greater than 0.05")
null_hyp_b
##### PREAMBLE ----
### Clear global .environment
# Remove all objects in environment
rm(list=ls())
# Detach all loaded libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
### Load packages
# Create function for checking for required packages
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load packages: {car}
lapply(c("car"), pkgTest)
### Set working directory
# Check working directory
getwd()
# Set WD to folder of current R file.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# COnfirm WD now correct
getwd()
##### PROBLEM SET QUESTIONS ----
### Question 1 ----
# Load [Prestige] dataset
data("Prestige")
# Check new variable
Prestige$professional # Note NAs are still present
# Check levels of variable "type".
levels(Prestige$type) # "prof" = professional; "bc" = blue-collar; "wc" = white-collar
# Create new dummy variable "professional" where prof = 1 and remaining (bc and wc) = 0.
Prestige$professional <- ifelse(Prestige$type == "prof", 1, 0)
# Coerce as factor to ensure model doesn't interpret as a continuous numerical variable
Prestige$professional <- as.factor(Prestige$professional)
# Check new variable
Prestige$professional # Note NAs are still present
# Remove observations with NAs
Prestige_complete <- Prestige[complete.cases(Prestige), ]
### b) linear model, y = prestige, x = income, professional, and interaction betw income and professional
# Create linear regression model
model_1 <- lm(prestige ~ income + professional + income:professional, Prestige_complete)
summary(model_1)
plot(model_1)
